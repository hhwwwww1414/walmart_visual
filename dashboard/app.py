# dashboard/app.py

import os
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from wordcloud import WordCloud

# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å seasonal_decompose
try:
    from statsmodels.tsa.seasonal import seasonal_decompose
    _has_statsmodels = True
except ImportError:
    _has_statsmodels = False

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
PATH_SALES_PARQUET   = os.path.join(BASE_DIR, "data", "processed", "processed.parquet")
PATH_SENTIMENT_CSV   = os.path.join(BASE_DIR, "data", "reviews", "sentiment.csv")
PATH_DL_COMPARISON   = os.path.join(BASE_DIR, "results_dl", "dl_comparison.csv")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Walmart Forecasting Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_data
def load_sales():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö parquet-–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂."""
    if not os.path.exists(PATH_SALES_PARQUET):
        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {PATH_SALES_PARQUET}")
        return pd.DataFrame()
    return pd.read_parquet(PATH_SALES_PARQUET)

@st.cache_data
def load_reviews():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ sentiment.csv."""
    if not os.path.exists(PATH_SENTIMENT_CSV):
        return pd.DataFrame(columns=["text", "label"])
    df = pd.read_csv(PATH_SENTIMENT_CSV)
    # –æ–∂–∏–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ 'text' –∏ 'label'
    if "text" not in df.columns or "label" not in df.columns:
        return pd.DataFrame(columns=["text", "label"])
    return df[["text", "label"]]

@st.cache_data
def load_dl_metrics():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    if not os.path.exists(PATH_DL_COMPARISON):
        return pd.DataFrame()
    return pd.read_csv(PATH_DL_COMPARISON)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
df_sales = load_sales()
df_reviews = load_reviews()
df_dl    = load_dl_metrics()

# --- Sidebar: —Ñ–∏–ª—å—Ç—Ä—ã ---
st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–¥–∞–∂")
if not df_sales.empty:
    min_date, max_date = df_sales.Date.min().date(), df_sales.Date.max().date()
    date_range = st.sidebar.date_input(
        "–ü–µ—Ä–∏–æ–¥", (min_date, max_date),
        min_value=min_date, max_value=max_date
    )
    if len(date_range) == 2:
        start, end = pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1])
        df_sales = df_sales[df_sales.Date.between(start, end)]

    stores = ["–í—Å–µ"] + sorted(df_sales.Store.unique().tolist())
    sel_store = st.sidebar.selectbox("–ú–∞–≥–∞–∑–∏–Ω", stores)
    if sel_store != "–í—Å–µ":
        df_sales = df_sales[df_sales.Store == sel_store]

    depts = ["–í—Å–µ"] + sorted(df_sales.Dept.unique().tolist())
    sel_dept = st.sidebar.selectbox("–û—Ç–¥–µ–ª", depts)
    if sel_dept != "–í—Å–µ":
        df_sales = df_sales[df_sales.Dept == sel_dept]
else:
    st.sidebar.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤")

# --- –†–∞–∑–¥–µ–ª 1: –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–∞–∂ ---
st.title("üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ Walmart")
if "Weekly_Sales" in df_sales.columns:
    agg = df_sales.groupby(["Date", "IsHoliday"])["Weekly_Sales"].sum().reset_index()
    fig = px.bar(
        agg, x="Date", y="Weekly_Sales", color="IsHoliday",
        barmode="stack",
        labels={"Weekly_Sales": "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂", "IsHoliday": "–ü—Ä–∞–∑–¥–Ω–∏–∫"},
        title="–ü—Ä–æ–¥–∞–∂–∏ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º –Ω–µ–¥–µ–ª—è–º"
    )
    fig.update_layout(xaxis_title=None, yaxis_title="–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂")
    st.plotly_chart(fig, use_container_width=True)
else:
    st.warning("–ö–æ–ª–æ–Ω–∫–∞ `Weekly_Sales` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

# --- –†–∞–∑–¥–µ–ª 2: –°–µ–∑–æ–Ω–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è ---
st.subheader("üîç –°–µ–∑–æ–Ω–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å—É–º–º–∞—Ä–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
if _has_statsmodels and "Weekly_Sales" in df_sales.columns:
    daily = df_sales.groupby("Date")["Weekly_Sales"].sum().reset_index()
    if len(daily) >= 104:
        decomp = seasonal_decompose(daily.set_index("Date")["Weekly_Sales"], model="additive", period=52)
        comp = make_subplots(rows=4, cols=1, shared_xaxes=True,
                             subplot_titles=["–ù–∞–±–ª—é–¥–µ–Ω–∏—è", "–¢—Ä–µ–Ω–¥", "–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", "–û—Å—Ç–∞—Ç–∫–∏"])
        comp.add_trace(go.Scatter(x=daily.Date, y=daily.Weekly_Sales), row=1, col=1)
        comp.add_trace(go.Scatter(x=daily.Date, y=decomp.trend), row=2, col=1)
        comp.add_trace(go.Scatter(x=daily.Date, y=decomp.seasonal), row=3, col=1)
        comp.add_trace(go.Scatter(x=daily.Date, y=decomp.resid), row=4, col=1)
        comp.update_layout(height=800, showlegend=False)
        st.plotly_chart(comp, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
else:
    st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `statsmodels` –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")

# --- –†–∞–∑–¥–µ–ª 3: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ ---
st.subheader("üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
features = ["Weekly_Sales", "Size", "Temperature", "Fuel_Price", "CPI", "Unemployment"]
available = [f for f in features if f in df_sales.columns]
sel = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", available, default=available)
if sel:
    corr = df_sales[sel].corr()
    hm = px.imshow(corr, text_auto=".2f", color_continuous_scale="RdBu", origin="lower")
    hm.update_layout(height=400, margin=dict(t=40))
    st.plotly_chart(hm, use_container_width=True)
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫")

# --- –†–∞–∑–¥–µ–ª 4: Scatter —Å –≤—ã–±–æ—Ä–æ–º –æ–±—ä—ë–º–∞ –∏ —Ü–µ–ª–∏ ---
st.subheader("üîÄ Scatter: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
num_cols = df_sales.select_dtypes(include="number").columns.tolist()
if num_cols:
    target = st.selectbox("–û—Å—å Y (—Ü–µ–ª—å)", num_cols, index=num_cols.index("Weekly_Sales") if "Weekly_Sales" in num_cols else 0)
    x_feats = st.multiselect("–û—Å—å X", [c for c in num_cols if c!=target], default=[c for c in num_cols if c not in ("Store","Dept","IsHoliday","Date",target)][:3])
    n = len(df_sales)
    opts = [1000, 5000, 10000]
    opts = [o for o in opts if o<n] + [n]
    sample_n = st.select_slider("–¢–æ—á–µ–∫", opts, value=min(5000,n))
    if x_feats:
        df_sub = df_sales.sample(sample_n, random_state=1)
        cols = 3
        for i in range(0, len(x_feats), cols):
            row = st.columns(min(cols, len(x_feats)-i))
            for j, feat in enumerate(x_feats[i:i+cols]):
                fig = px.scatter(df_sub, x=feat, y=target, color="IsHoliday" if "IsHoliday" in df_sub.columns else None,
                                 title=f"{feat} vs {target} (n={sample_n})")
                fig.update_traces(marker=dict(size=4, opacity=0.6))
                row[j].plotly_chart(fig, use_container_width=True)
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ X-–ø—Ä–∏–∑–Ω–∞–∫–∏")
else:
    st.info("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è scatter")

# --- –†–∞–∑–¥–µ–ª 5: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è ---
if {"Latitude","Longitude"}.issubset(df_sales.columns):
    st.subheader("üåé –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤")
    loc = df_sales.groupby("Store")[["Latitude","Longitude","Weekly_Sales"]].sum().reset_index()
    mfig = px.scatter_mapbox(loc, lat="Latitude", lon="Longitude", size="Weekly_Sales",
                             hover_name="Store", mapbox_style="carto-positron", zoom=3)
    st.plotly_chart(mfig, use_container_width=True)

# --- –†–∞–∑–¥–µ–ª 6: –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ ---
st.title("üí¨ –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
if not df_reviews.empty:
    wc = WordCloud(width=800, height=300, background_color="white").generate(" ".join(df_reviews.text))
    st.image(wc.to_array(), use_column_width=True)
    df_reviews["length"] = df_reviews.text.str.len()
    h = px.histogram(df_reviews, x="length", nbins=30, title="–î–ª–∏–Ω–∞ –æ—Ç–∑—ã–≤–æ–≤")
    st.plotly_chart(h, use_container_width=True)
    # Pie chart sentiment
    cnt = df_reviews.label.value_counts().rename(index={0:"Negative",1:"Positive"})
    p = px.pie(names=cnt.index, values=cnt.values, title="–î–æ–ª–∏ –∫–ª–∞—Å—Å–æ–≤ –æ—Ç–∑—ã–≤–æ–≤")
    st.plotly_chart(p, use_container_width=True)
else:
    st.info("–ù–µ—Ç —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

# --- –†–∞–∑–¥–µ–ª 7: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DL ---
st.subheader("ü§ñ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ DL –º–æ–¥–µ–ª–µ–π")
if not df_dl.empty:
    st.dataframe(df_dl, use_container_width=True)
    acc = px.bar(df_dl, x="model", y="accuracy", title="Accuracy –º–æ–¥–µ–ª–µ–π")
    st.plotly_chart(acc, use_container_width=True)
    f1 = df_dl.melt(id_vars="model", value_vars=["f1_neg","f1_pos"], var_name="class", value_name="f1")
    f1_fig = px.bar(f1, x="model", y="f1", color="class", barmode="group", title="F1-score –ø–æ –∫–ª–∞—Å—Å–∞–º")
    st.plotly_chart(f1_fig, use_container_width=True)
else:
    st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ DL (results_dl/dl_comparison.csv)")
